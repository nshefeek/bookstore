"""migrations for borrowing package

Revision ID: 30d0babd2885
Revises: 20df57e102e3
Create Date: 2025-03-21 03:28:55.705582

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '30d0babd2885'
down_revision: Union[str, None] = '20df57e102e3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('book_requests',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('book_id', sa.UUID(), nullable=False),
    sa.Column('requested_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'NOTIFIED', 'FULFILLED', 'REJECTED', 'EXPIRED', name='bookrequeststatus'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name=op.f('fk_book_requests_book_id_books')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_book_requests_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'book_id', 'id', name=op.f('pk_book_requests'))
    )
    op.create_table('borrow_records',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('book_id', sa.UUID(), nullable=False),
    sa.Column('returned', sa.Boolean(), nullable=False),
    sa.Column('borrowed_date', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('due_date', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('return_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('BORROWED', 'RETURNED', 'OVERDUE', 'LOST', name='borrowstatus'), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.ForeignKeyConstraint(['book_id'], ['books.id'], name=op.f('fk_borrow_records_book_id_books')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_borrow_records_user_id_users')),
    sa.PrimaryKeyConstraint('user_id', 'book_id', 'id', name=op.f('pk_borrow_records'))
    )
    op.create_unique_constraint(op.f('uq_api_keys_user_id'), 'api_keys', ['user_id', 'name'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('uq_api_keys_user_id'), 'api_keys', type_='unique')
    op.drop_table('borrow_records')
    op.drop_table('book_requests')
    # ### end Alembic commands ###
